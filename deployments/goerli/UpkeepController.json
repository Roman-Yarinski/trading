{
  "address": "0x230396548e7C03FebA72799c6b1ca0d4032a6DA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "contract KeeperRegistrarInterface",
          "name": "registrar",
          "type": "address"
        },
        {
          "internalType": "contract AutomationRegistryWithMinANeededAmountInterface",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "FundsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UpkeepCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UpkeepCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amount",
          "type": "uint32"
        }
      ],
      "name": "UpkeepGasLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        }
      ],
      "name": "UpkeepOffchainConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UpkeepPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UpkeepUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newCheckData",
          "type": "bytes"
        }
      ],
      "name": "UpkeepUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "addFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "cancelUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        },
        {
          "internalType": "enum UpkeepFailureReason",
          "name": "upkeepFailureReason",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fastGasWei",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "linkNative",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getActiveUpkeepIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "upkeeps",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getDetailedUpkeeps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "minAmount",
              "type": "uint96"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "executeGas",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes",
                  "name": "checkData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint96",
                  "name": "balance",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "maxValidBlocknumber",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "lastPerformBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "amountSpent",
                  "type": "uint96"
                },
                {
                  "internalType": "bool",
                  "name": "paused",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "offchainConfig",
                  "type": "bytes"
                }
              ],
              "internalType": "struct UpkeepInfo",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct UpkeepControllerInterface.DetailedUpkeep[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "getMinBalanceForUpkeep",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getMinBalancesForUpkeeps",
      "outputs": [
        {
          "internalType": "uint96[]",
          "name": "",
          "type": "uint96[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "nonce",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "ownerLinkBalance",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "expectedLinkBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "totalPremium",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "numUpkeeps",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "configCount",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "latestConfigBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "latestConfigDigest",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "latestEpoch",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "paymentPremiumPPB",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "flatFeeMicroLink",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "checkGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "stalenessSeconds",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "gasCeilingMultiplier",
              "type": "uint16"
            },
            {
              "internalType": "uint96",
              "name": "minUpkeepSpend",
              "type": "uint96"
            },
            {
              "internalType": "uint32",
              "name": "maxPerformGas",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxCheckDataSize",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPerformDataSize",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "fallbackGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fallbackLinkPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "transcoder",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "registrar",
              "type": "address"
            }
          ],
          "internalType": "struct OnchainConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "transmitters",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "f",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "getUpkeep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "executeGas",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "checkData",
              "type": "bytes"
            },
            {
              "internalType": "uint96",
              "name": "balance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "maxValidBlocknumber",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "lastPerformBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "amountSpent",
              "type": "uint96"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "offchainConfig",
              "type": "bytes"
            }
          ],
          "internalType": "struct UpkeepInfo",
          "name": "upkeepInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUpkeeps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "executeGas",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "checkData",
              "type": "bytes"
            },
            {
              "internalType": "uint96",
              "name": "balance",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "maxValidBlocknumber",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "lastPerformBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "amountSpent",
              "type": "uint96"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "offchainConfig",
              "type": "bytes"
            }
          ],
          "internalType": "struct UpkeepInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpkeepsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registrar",
      "outputs": [
        {
          "internalType": "contract KeeperRegistrarInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryWithMinANeededAmountInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNewUpkeepNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isNeeded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "newOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "pauseUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encryptedEmail",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "upkeepContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "gasLimit",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "checkData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "offchainConfig",
              "type": "bytes"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct KeeperRegistrarInterface.RegistrationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "registerAndPredictID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setUpkeepGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        }
      ],
      "name": "setUpkeepOffchainConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        }
      ],
      "name": "unpauseUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upkeepId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "newCheckData",
          "type": "bytes"
        }
      ],
      "name": "updateCheckData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06904b2799b19573761e5cca7229991bffbafdf4bd9ef5122a1844203c94680a",
  "receipt": {
    "to": null,
    "from": "0xB984f9F42d405A37F7f3903C73cbF7112DCc859b",
    "contractAddress": "0x230396548e7C03FebA72799c6b1ca0d4032a6DA2",
    "transactionIndex": 11,
    "gasUsed": "2550027",
    "logsBloom": "0x
    "blockHash": "0x41bc260e937cfecdd429694efd10e6f0f5d39b789a1f92de81c160ad10488e53",
    "transactionHash": "0x06904b2799b19573761e5cca7229991bffbafdf4bd9ef5122a1844203c94680a",
    "logs": [],
    "blockNumber": 9144752,
    "cumulativeGasUsed": "5484746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x57A4a13b35d25EE78e084168aBaC5ad360252467",
    "0xE16Df59B887e3Caa439E0b29B42bA2e7976FD8b2"
  ],
  "numDeployments": 2,
  "solcInputHash": "79079278460465399d4985e10ac8437f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"contract KeeperRegistrarInterface\",\"name\":\"registrar\",\"type\":\"address\"},{\"internalType\":\"contract AutomationRegistryWithMinANeededAmountInterface\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpkeepCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpkeepCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"UpkeepGasLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"name\":\"UpkeepOffchainConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpkeepPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpkeepUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"UpkeepUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"cancelUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"},{\"internalType\":\"enum UpkeepFailureReason\",\"name\":\"upkeepFailureReason\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fastGasWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linkNative\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getActiveUpkeepIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"upkeeps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getDetailedUpkeeps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"minAmount\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxValidBlocknumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastPerformBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amountSpent\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"struct UpkeepInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct UpkeepControllerInterface.DetailedUpkeep[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"getMinBalanceForUpkeep\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getMinBalancesForUpkeeps\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"ownerLinkBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"expectedLinkBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalPremium\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"numUpkeeps\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"latestConfigBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"latestConfigDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"latestEpoch\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentPremiumPPB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"flatFeeMicroLink\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"checkGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"stalenessSeconds\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"gasCeilingMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"minUpkeepSpend\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformGas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxCheckDataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPerformDataSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fallbackGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackLinkPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"internalType\":\"struct OnchainConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"getUpkeep\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxValidBlocknumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastPerformBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amountSpent\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"struct UpkeepInfo\",\"name\":\"upkeepInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUpkeeps\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"executeGas\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"maxValidBlocknumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lastPerformBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amountSpent\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"internalType\":\"struct UpkeepInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpkeepsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registrar\",\"outputs\":[{\"internalType\":\"contract KeeperRegistrarInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryWithMinANeededAmountInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNewUpkeepNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isNeeded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"pauseUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encryptedEmail\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"upkeepContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct KeeperRegistrarInterface.RegistrationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"registerAndPredictID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"setUpkeepGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"name\":\"setUpkeepOffchainConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"}],\"name\":\"unpauseUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newCheckData\",\"type\":\"bytes\"}],\"name\":\"updateCheckData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements the UpkeepControllerInterface and provides functionality to register, cancel, pause, and unpause upkeeps, as well as update their check data, gas limits, and off-chain configurations.\",\"kind\":\"dev\",\"methods\":{\"addFunds(uint256,uint96)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"cancelUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"checkUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"constructor\":{\"params\":{\"link\":\"The address of the LinkToken contract.\",\"registrar\":\"The address of the KeeperRegistrar contract.\",\"registry\":\"The address of the AutomationRegistry contract.\"}},\"getActiveUpkeepIDs(uint256,uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getDetailedUpkeeps(uint256,uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getMinBalanceForUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getMinBalancesForUpkeeps(uint256,uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getState()\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getUpkeeps(uint256,uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"getUpkeepsCount()\":{\"details\":\"See {UpkeepControllerInterface}\"},\"isNewUpkeepNeeded()\":{\"details\":\"See {UpkeepControllerInterface}\"},\"pauseUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"registerAndPredictID((string,bytes,address,uint32,address,bytes,bytes,uint96))\":{\"details\":\"See {UpkeepControllerInterface}\"},\"setUpkeepGasLimit(uint256,uint32)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"setUpkeepOffchainConfig(uint256,bytes)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"unpauseUpkeep(uint256)\":{\"details\":\"See {UpkeepControllerInterface}\"},\"updateCheckData(uint256,bytes)\":{\"details\":\"See {UpkeepControllerInterface}\"}},\"title\":\"UpkeepController contract\",\"version\":1},\"userdoc\":{\"events\":{\"FundsAdded(uint256,uint96)\":{\"notice\":\"Emitted when funds are added to an upkeep.\"},\"UpkeepCanceled(uint256)\":{\"notice\":\"Emitted when an upkeep is canceled.\"},\"UpkeepCreated(uint256)\":{\"notice\":\"Emitted when a new upkeep is created.\"},\"UpkeepGasLimitSet(uint256,uint32)\":{\"notice\":\"Emitted when the gas limit is set for an upkeep.\"},\"UpkeepOffchainConfigSet(uint256,bytes)\":{\"notice\":\"Emitted when the off-chain configuration is set for an upkeep.\"},\"UpkeepPaused(uint256)\":{\"notice\":\"Emitted when an upkeep is paused.\"},\"UpkeepUnpaused(uint256)\":{\"notice\":\"Emitted when an upkeep is unpaused.\"},\"UpkeepUpdated(uint256,bytes)\":{\"notice\":\"Emitted when an upkeep is updated.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the UpkeepController contract.\"}},\"notice\":\"A contract that manages upkeeps for the Chainlink automation system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automationController/UpkeepController.sol\":\"UpkeepController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice OnchainConfig of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct OnchainConfig {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint32 maxCheckDataSize;\\n  uint32 maxPerformDataSize;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member totalPremium the total premium collected on registry so far\\n * @member numUpkeeps total number of upkeeps on the registry\\n * @member configCount ordinal number of current config, out of all configs applied to this contract so far\\n * @member latestConfigBlockNumber last block at which this config was set\\n * @member latestConfigDigest domain-separation tag for current config\\n * @member latestEpoch for which a report was transmitted\\n * @member paused freeze on execution scoped to the entire registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint96 totalPremium;\\n  uint256 numUpkeeps;\\n  uint32 configCount;\\n  uint32 latestConfigBlockNumber;\\n  bytes32 latestConfigDigest;\\n  uint32 latestEpoch;\\n  bool paused;\\n}\\n\\n/**\\n * @notice all information about an upkeep\\n * @dev only used in return values\\n * @member target the contract which needs to be serviced\\n * @member executeGas the gas limit of upkeep execution\\n * @member checkData the checkData bytes for this upkeep\\n * @member balance the balance of this upkeep\\n * @member admin for this upkeep\\n * @member maxValidBlocknumber until which block this upkeep is valid\\n * @member lastPerformBlockNumber the last block number when this upkeep was performed\\n * @member amountSpent the amount this upkeep has spent\\n * @member paused if this upkeep has been paused\\n * @member skipSigVerification skip signature verification in transmit for a low security low cost model\\n */\\nstruct UpkeepInfo {\\n  address target;\\n  uint32 executeGas;\\n  bytes checkData;\\n  uint96 balance;\\n  address admin;\\n  uint64 maxValidBlocknumber;\\n  uint32 lastPerformBlockNumber;\\n  uint96 amountSpent;\\n  bool paused;\\n  bytes offchainConfig;\\n}\\n\\nenum UpkeepFailureReason {\\n  NONE,\\n  UPKEEP_CANCELLED,\\n  UPKEEP_PAUSED,\\n  TARGET_CHECK_REVERTED,\\n  UPKEEP_NOT_NEEDED,\\n  PERFORM_DATA_EXCEEDS_LIMIT,\\n  INSUFFICIENT_BALANCE\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData,\\n    bytes calldata offchainConfig\\n  ) external returns (uint256 id);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function pauseUpkeep(uint256 id) external;\\n\\n  function unpauseUpkeep(uint256 id) external;\\n\\n  function transferUpkeepAdmin(uint256 id, address proposed) external;\\n\\n  function acceptUpkeepAdmin(uint256 id) external;\\n\\n  function updateCheckData(uint256 id, bytes calldata newCheckData) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function setUpkeepOffchainConfig(uint256 id, bytes calldata config) external;\\n\\n  function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getTransmitterInfo(address query)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      uint8 index,\\n      uint96 balance,\\n      uint96 lastCollected,\\n      address payee\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory state,\\n      OnchainConfig memory config,\\n      address[] memory signers,\\n      address[] memory transmitters,\\n      uint8 f\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    view\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId)\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData,\\n      UpkeepFailureReason upkeepFailureReason,\\n      uint256 gasUsed,\\n      uint256 fastGasWei,\\n      uint256 linkNative\\n    );\\n}\\n\",\"keccak256\":\"0x9faf0551509440bd9c25a4a2f14b23bce2f82e5ab5691058b9664edab808468c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contractsV4/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/automationController/UpkeepController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport {UpkeepInfo, State, OnchainConfig, UpkeepFailureReason} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contractsV4/access/AccessControlEnumerable.sol\\\";\\nimport {AutomationCompatibleWithViewInterface} from \\\"./interfaces/AutomationCompatibleWithViewInterface.sol\\\";\\nimport {AutomationRegistryWithMinANeededAmountInterface} from \\\"./interfaces/AutomationRegistryWithMinANeededAmountInterface.sol\\\";\\nimport {KeeperRegistrarInterface} from \\\"./interfaces/KeeperRegistrarInterface.sol\\\";\\nimport {UpkeepControllerInterface} from \\\"./interfaces/UpkeepControllerInterface.sol\\\";\\n\\n/**\\n * @title UpkeepController contract\\n * @notice A contract that manages upkeeps for the Chainlink automation system.\\n * @dev This contract implements the UpkeepControllerInterface and provides functionality to register, cancel,\\n * pause, and unpause upkeeps, as well as update their check data, gas limits, and off-chain configurations.\\n */\\ncontract UpkeepController is UpkeepControllerInterface {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    LinkTokenInterface public immutable i_link;\\n    KeeperRegistrarInterface public immutable i_registrar;\\n    AutomationRegistryWithMinANeededAmountInterface public immutable i_registry;\\n\\n    EnumerableSet.UintSet private activeUpkeeps;\\n    EnumerableSet.UintSet private pausedUpkeeps;\\n\\n    /**\\n     * @notice Constructs the UpkeepController contract.\\n     * @param link The address of the LinkToken contract.\\n     * @param registrar The address of the KeeperRegistrar contract.\\n     * @param registry The address of the AutomationRegistry contract.\\n     */\\n    constructor(\\n        LinkTokenInterface link,\\n        KeeperRegistrarInterface registrar,\\n        AutomationRegistryWithMinANeededAmountInterface registry\\n    ) {\\n        i_link = link;\\n        i_registrar = registrar;\\n        i_registry = registry;\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function registerAndPredictID(KeeperRegistrarInterface.RegistrationParams memory params) public {\\n        i_link.transferFrom(msg.sender, address(this), params.amount);\\n        i_link.approve(address(i_registrar), params.amount);\\n        uint256 upkeepId = i_registrar.registerUpkeep(params);\\n        if (upkeepId != 0) {\\n            activeUpkeeps.add(upkeepId);\\n            emit UpkeepCreated(upkeepId);\\n        } else {\\n            revert(\\\"auto-approve disabled\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function cancelUpkeep(uint256 upkeepId) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.cancelUpkeep(upkeepId);\\n        activeUpkeeps.remove(upkeepId);\\n        emit UpkeepCanceled(upkeepId);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function pauseUpkeep(uint256 upkeepId) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.pauseUpkeep(upkeepId);\\n        pausedUpkeeps.add(upkeepId);\\n        activeUpkeeps.remove(upkeepId);\\n        emit UpkeepPaused(upkeepId);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function unpauseUpkeep(uint256 upkeepId) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.unpauseUpkeep(upkeepId);\\n        pausedUpkeeps.remove(upkeepId);\\n        activeUpkeeps.add(upkeepId);\\n        emit UpkeepUnpaused(upkeepId);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function updateCheckData(uint256 upkeepId, bytes memory newCheckData) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.updateCheckData(upkeepId, newCheckData);\\n        emit UpkeepUpdated(upkeepId, newCheckData);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function setUpkeepGasLimit(uint256 upkeepId, uint32 gasLimit) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.setUpkeepGasLimit(upkeepId, gasLimit);\\n        emit UpkeepGasLimitSet(upkeepId, gasLimit);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function setUpkeepOffchainConfig(uint256 upkeepId, bytes calldata config) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_registry.setUpkeepOffchainConfig(upkeepId, config);\\n        emit UpkeepOffchainConfigSet(upkeepId, config);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function addFunds(uint256 upkeepId, uint96 amount) external {\\n        require(activeUpkeeps.contains(upkeepId), \\\"Wrong upkeep id\\\");\\n        i_link.transferFrom(msg.sender, address(this), amount);\\n        i_link.approve(address(i_registry), amount);\\n        i_registry.addFunds(upkeepId, amount);\\n        emit FundsAdded(upkeepId, amount);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getUpkeep(uint256 upkeepId) external view returns (UpkeepInfo memory upkeepInfo) {\\n        return i_registry.getUpkeep(upkeepId);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getActiveUpkeepIDs(uint256 offset, uint256 limit) public view returns (uint256[] memory upkeeps) {\\n        uint256 ordersCount = activeUpkeeps.length();\\n        if (offset >= ordersCount) return new uint256[](0);\\n        uint256 to = offset + limit;\\n        if (ordersCount < to) to = ordersCount;\\n        upkeeps = new uint256[](to - offset);\\n        for (uint256 i = 0; i < upkeeps.length; i++) upkeeps[i] = activeUpkeeps.at(offset + i);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getUpkeeps(uint256 offset, uint256 limit) public view returns (UpkeepInfo[] memory) {\\n        uint256[] memory activeIds = getActiveUpkeepIDs(offset, limit); // FIX IT\\n        UpkeepInfo[] memory upkeepsInfo = new UpkeepInfo[](activeIds.length);\\n        for (uint256 i = 0; i < upkeepsInfo.length; i++) {\\n            upkeepsInfo[i] = i_registry.getUpkeep(activeIds[i]);\\n        }\\n        return upkeepsInfo;\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getMinBalanceForUpkeep(uint256 upkeepId) external view returns (uint96) {\\n        return i_registry.getMinBalanceForUpkeep(upkeepId);\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getMinBalancesForUpkeeps(uint256 offset, uint256 limit) public view returns (uint96[] memory) {\\n        uint256[] memory activeIds = getActiveUpkeepIDs(offset, limit);\\n        uint256 count = activeIds.length;\\n        if (offset >= count) return new uint96[](0);\\n        uint256 to = offset + limit;\\n        if (count < to) to = count;\\n        uint96[] memory upkeepsMinAmounts = new uint96[](to - offset);\\n        for (uint256 i = 0; i < upkeepsMinAmounts.length; i++) {\\n            upkeepsMinAmounts[i] = i_registry.getMinBalanceForUpkeep(activeIds[i]);\\n        }\\n        return upkeepsMinAmounts;\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getDetailedUpkeeps(uint256 offset, uint256 limit) external view returns (DetailedUpkeep[] memory) {\\n        uint256[] memory activeIds = getActiveUpkeepIDs(offset, limit);\\n        uint256 count = activeIds.length;\\n        if (offset >= count) return new DetailedUpkeep[](0);\\n        uint256 to = offset + limit;\\n        if (count < to) to = count;\\n        DetailedUpkeep[] memory detailedUpkeeps = new DetailedUpkeep[](to - offset);\\n        UpkeepInfo[] memory info = getUpkeeps(offset, limit);\\n        uint96[] memory minAmounts = getMinBalancesForUpkeeps(offset, limit);\\n        for (uint256 i = 0; i < detailedUpkeeps.length; i++) {\\n            detailedUpkeeps[i] = DetailedUpkeep(activeIds[i], minAmounts[i], info[i]);\\n        }\\n        return detailedUpkeeps;\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getUpkeepsCount() external view returns (uint256) {\\n        return activeUpkeeps.length();\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function getState()\\n        external\\n        view\\n        returns (\\n            State memory state,\\n            OnchainConfig memory config,\\n            address[] memory signers,\\n            address[] memory transmitters,\\n            uint8 f\\n        )\\n    {\\n        return i_registry.getState();\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function isNewUpkeepNeeded() external view returns (bool isNeeded, uint256 newOffset, uint256 newLimit) {\\n        uint256 lastActive = activeUpkeeps.length() - 1;\\n        uint256 lastUpkeepId = activeUpkeeps.at(lastActive);\\n        UpkeepInfo memory info = i_registry.getUpkeep(lastUpkeepId);\\n        (uint128 performOffset, uint128 performLimit) = abi.decode(info.checkData, (uint128, uint128));\\n        (, bytes memory checkResult) = AutomationCompatibleWithViewInterface(info.target).checkUpkeep(info.checkData);\\n        uint256[] memory performArray = abi.decode(checkResult, (uint256[]));\\n        isNeeded = performArray.length >= performLimit ? true : false;\\n        newOffset = performOffset + performLimit;\\n        newLimit = performLimit;\\n    }\\n\\n    /**\\n     * @dev See {UpkeepControllerInterface}\\n     */\\n    function checkUpkeep(\\n        uint256 upkeepId\\n    )\\n        public\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory performData,\\n            UpkeepFailureReason upkeepFailureReason,\\n            uint256 gasUsed,\\n            uint256 fastGasWei,\\n            uint256 linkNative\\n        )\\n    {\\n        return i_registry.checkUpkeep(upkeepId);\\n    }\\n}\\n\",\"keccak256\":\"0x9757a91e4744e0c29d16b906d21fdcfac911fdf6d25cd662f34293a268ce53c6\",\"license\":\"MIT\"},\"contracts/automationController/interfaces/AutomationCompatibleWithViewInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {KeeperRegistrarInterface} from \\\"./KeeperRegistrarInterface.sol\\\";\\n\\ninterface AutomationCompatibleWithViewInterface {\\n    /**\\n     * @notice Checks the upkeep status and provides the necessary data for performing the upkeep.\\n     * @param checkData Additional data needed to determine the upkeep status.\\n     * @return upkeepNeeded Indicates whether the upkeep is needed or not.\\n     * @return performData The data required to perform the upkeep.\\n     * @dev This function allows users to check the status of an upkeep and obtain the data necessary to perform the upkeep.\\n     * The checkData parameter contains any additional data required to determine the upkeep status.\\n     * The function returns a boolean value (upkeepNeeded) indicating whether the upkeep is needed or not.\\n     * If upkeepNeeded is true, it means the upkeep should be performed.\\n     * In addition, the function returns performData, which is the data needed to execute the upkeep.\\n     * Users can use this data to perform the upkeep.\\n     */\\n    function checkUpkeep(bytes calldata checkData) external view returns (bool upkeepNeeded, bytes memory performData);\\n}\\n\",\"keccak256\":\"0x0e7858b67de2c06e1ce3d5e67a7e2f5db6876afbef7d805807e2e74061d419cd\",\"license\":\"MIT\"},\"contracts/automationController/interfaces/AutomationRegistryWithMinANeededAmountInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {AutomationRegistryExecutableInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\n\\ninterface AutomationRegistryWithMinANeededAmountInterface is AutomationRegistryExecutableInterface {\\n    /**\\n     * @notice Retrieves the minimum balance required for a specific upkeep.\\n     * @param upkeepId The unique identifier (ID) of the upkeep.\\n     * @return The minimum balance required for the specified upkeep.\\n     * @dev This function allows users to retrieve the minimum balance required to perform a specific upkeep.\\n     * The minimum balance represents the amount of funds that need to be available in the contract in order to execute the upkeep successfully.\\n     * The upkeep ID is used to identify the specific upkeep for which the minimum balance is being retrieved.\\n     */\\n    function getMinBalanceForUpkeep(uint256 upkeepId) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x985c4e64b30c11829d9476c8dc3408881000ba7f66c77bb8764845481661cbab\",\"license\":\"MIT\"},\"contracts/automationController/interfaces/KeeperRegistrarInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface KeeperRegistrarInterface {\\n    /**\\n     * @notice Represents the registration parameters required for creating an upkeep.\\n     * @param name The name associated with the upkeep.\\n     * @param encryptedEmail The encrypted email associated with the upkeep.\\n     * @param upkeepContract The address of the upkeep contract.\\n     * @param gasLimit The gas limit for the upkeep.\\n     * @param adminAddress The address of the admin associated with the upkeep.\\n     * @param checkData Additional data used for checking the upkeep.\\n     * @param offchainConfig Off-chain configuration data associated with the upkeep.\\n     * @param amount The amount associated with the upkeep.\\n     * @dev This struct encapsulates the upkeep parameters required for creating an upkeep.\\n     */\\n    struct RegistrationParams {\\n        string name;\\n        bytes encryptedEmail;\\n        address upkeepContract;\\n        uint32 gasLimit;\\n        address adminAddress;\\n        bytes checkData;\\n        bytes offchainConfig;\\n        uint96 amount;\\n    }\\n\\n    /**\\n     * @notice Registers an upkeep using the provided registration parameters.\\n     * @param requestParams The registration parameters for creating the upkeep.\\n     * @return The unique identifier (ID) assigned to the newly registered upkeep.\\n     * @dev This function allows users to register an upkeep by providing the necessary registration parameters.\\n     * The registration parameters include information such as the name, encrypted email, upkeep contract address,\\n     * gas limit, admin address, additional check data, off-chain configuration, and amount.\\n     * Upon successful registration, a unique identifier (ID) is assigned to the upkeep, which can be used for future reference.\\n     * @dev Emits an {UpkeepCreated} event.\\n     */\\n    function registerUpkeep(RegistrationParams calldata requestParams) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd328f19ed6ec3008cfd3418b62a80c603b24308c9d2785e8e11f0e9e23547946\",\"license\":\"MIT\"},\"contracts/automationController/interfaces/UpkeepControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {UpkeepInfo, State, OnchainConfig, UpkeepFailureReason} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\nimport {AutomationRegistryExecutableInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationRegistryInterface2_0.sol\\\";\\nimport {KeeperRegistrarInterface} from \\\"./KeeperRegistrarInterface.sol\\\";\\n\\ninterface UpkeepControllerInterface {\\n    /**\\n     * @notice Represents a detailed upkeep containing information about an upkeep,\\n     * including its ID, minimum amount, and additional upkeep information.\\n     * @param id The ID of the upkeep.\\n     * @param minAmount The minimum amount required for the upkeep.\\n     * @param info The UpkeepInfo struct containing detailed information about the upkeep.\\n     * @dev This struct is used to encapsulate detailed information about an upkeep,\\n     * including its  relevant details.\\n     */\\n    struct DetailedUpkeep {\\n        uint256 id;\\n        uint96 minAmount;\\n        UpkeepInfo info;\\n    }\\n\\n    /**\\n     * @notice Emitted when a new upkeep is created.\\n     * @param id The ID of the created upkeep.\\n     * @dev This event is emitted when a new upkeep.\\n     */\\n    event UpkeepCreated(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when an upkeep is canceled.\\n     * @param id The ID of the canceled upkeep.\\n     * @dev This event is emitted when an upkeep is canceled.\\n     */\\n    event UpkeepCanceled(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when an upkeep is paused.\\n     * @param id The ID of the paused upkeep.\\n     * @dev This event is emitted when an upkeep is paused.\\n     */\\n    event UpkeepPaused(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when an upkeep is unpaused.\\n     * @param id The ID of the unpaused upkeep.\\n     * @dev This event is emitted when an upkeep is unpaused.\\n     */\\n    event UpkeepUnpaused(uint256 indexed id);\\n\\n    /**\\n     * @notice Emitted when an upkeep is updated.\\n     * @param id The ID of the updated upkeep.\\n     * @param newCheckData The new check data for the upkeep.\\n     * @dev This event is emitted when an upkeep is updated, with the new check data included.\\n     */\\n\\n    event UpkeepUpdated(uint256 indexed id, bytes newCheckData);\\n    /**\\n     * @notice Emitted when funds are added to an upkeep.\\n     * @param id The ID of the upkeep to which funds are added.\\n     * @param amount The amount of funds added to the upkeep.\\n     * @dev This event is emitted when funds are added to an upkeep.\\n     */\\n\\n    event FundsAdded(uint256 indexed id, uint96 amount);\\n    /**\\n     * @notice Emitted when the gas limit is set for an upkeep.\\n     * @param id The ID of the upkeep for which the gas limit is set.\\n     * @param amount The gas limit value set for the upkeep.\\n     * @dev This event is emitted when the gas limit is set for an upkeep.\\n     */\\n\\n    event UpkeepGasLimitSet(uint256 indexed id, uint32 amount);\\n\\n    /**\\n     * @notice Emitted when the off-chain configuration is set for an upkeep.\\n     * @param id The ID of the upkeep for which the off-chain configuration is set.\\n     * @param config The off-chain configuration data set for the upkeep.\\n     * @dev This event is emitted when the off-chain configuration is set for an upkeep.\\n     */\\n    event UpkeepOffchainConfigSet(uint256 indexed id, bytes config);\\n\\n    /**\\n     * @notice Registers a new upkeep and predicts its ID.\\n     * @param params The registration parameters for the upkeep.\\n     * @dev The caller must approve the transfer of LINK tokens to this contract before calling this function.\\n     * @dev This function transfers the specified amount of LINK tokens from the caller to this contract.\\n     * @dev It then approves the transfer of LINK tokens to the KeeperRegistrar contract.\\n     * @dev Next, it calls the registerUpkeep function of the KeeperRegistrar contract to register the upkeep.\\n     * @dev If the upkeep is successfully registered, the upkeep ID is added to the activeUpkeeps set and an UpkeepCreated event is emitted.\\n     * @dev If the upkeep registration fails, the function reverts with an error message.\\n     * @dev Emits a {UpkeepCreated} event.\\n     */\\n    function registerAndPredictID(KeeperRegistrarInterface.RegistrationParams memory params) external;\\n\\n    /**\\n     * @notice Cancel an active upkeep.\\n     * @param upkeepId The ID of the upkeep to cancel.\\n     * @dev The upkeep must be active.\\n     * @dev This function calls the cancelUpkeep function of the AutomationRegistry contract to cancel the upkeep.\\n     * @dev It removes the upkeep ID from the activeUpkeeps set.\\n     * @dev Emits a {UpkeepCanceled} event.\\n     */\\n    function cancelUpkeep(uint256 upkeepId) external;\\n\\n    /**\\n     * @notice Pauses an active upkeep.\\n     * @param upkeepId The ID of the upkeep to pause.\\n     * @dev The upkeep must be active.\\n     * @dev This function calls the pauseUpkeep function of the AutomationRegistry contract to pause the upkeep.\\n     * @dev It removes the upkeep ID from the activeUpkeeps set, adds it to the pausedUpkeeps set.\\n     * @dev Emits a {UpkeepPaused} event.\\n     */\\n    function pauseUpkeep(uint256 upkeepId) external;\\n\\n    /**\\n     * @notice Unpauses a paused upkeep.\\n     * @param upkeepId The ID of the upkeep to unpause.\\n     * @dev The upkeep must be paused.\\n     * @dev This function calls the unpauseUpkeep function of the AutomationRegistry contract to unpause the upkeep.\\n     * @dev It removes the upkeep ID from the pausedUpkeeps set, adds it to the activeUpkeeps set.\\n     * @dev Emits a {UpkeepUnpaused} event.\\n     */\\n    function unpauseUpkeep(uint256 upkeepId) external;\\n\\n    /**\\n     * @notice Updates the check data of an upkeep.\\n     * @param upkeepId The ID of the upkeep to update.\\n     * @param newCheckData The new check data to set for the upkeep.\\n     * @dev The upkeep must be an active upkeep.\\n     * @dev This function calls the updateCheckData function of the AutomationRegistryWithMinANeededAmount contract to update the check data of the upkeep.\\n     * @dev Emits a {UpkeepUpdated} event.\\n     */\\n    function updateCheckData(uint256 upkeepId, bytes memory newCheckData) external;\\n\\n    /**\\n     * @notice Update the gas limit for an specific upkeep.\\n     * @param upkeepId The ID of the upkeep to set the gas limit for.\\n     * @param gasLimit The gas limit to set for the upkeep.\\n     * @dev The upkeep must be active.\\n     * @dev This function calls the setUpkeepGasLimit function of the AutomationRegistry\\n     * contract to set the gas limit for the upkeep.\\n     * @dev Emits a {UpkeepGasLimitSet} event.\\n     */\\n    function setUpkeepGasLimit(uint256 upkeepId, uint32 gasLimit) external;\\n\\n    /**\\n     * @notice Update the off-chain configuration for an upkeep.\\n     * @param upkeepId The ID of the upkeep to set the off-chain configuration for.\\n     * @param config The off-chain configuration data to set for the upkeep.\\n     * @dev The upkeep must be active.\\n     * @dev This function calls the setUpkeepOffchainConfig function of the AutomationRegistry contract\\n     * to set the off-chain configuration for the upkeep.\\n     * @dev Emits a {UpkeepOffchainConfigSet} event.\\n     */\\n    function setUpkeepOffchainConfig(uint256 upkeepId, bytes calldata config) external;\\n\\n    /**\\n     * @notice Adds funds to an upkeep.\\n     * @param upkeepId The ID of the upkeep to add funds to.\\n     * @param amount The amount of funds to add to the upkeep.\\n     * @dev The upkeep must be active.\\n     * @dev This function transfers the specified amount of LINK tokens from the caller to the contract.\\n     * @dev It approves the transferred LINK tokens for the AutomationRegistry contract\\n     * and calls the addFunds function of the AutomationRegistry contract to add funds to the upkeep.\\n     * @dev Emits a {FundsAdded} event.\\n     */\\n    function addFunds(uint256 upkeepId, uint96 amount) external;\\n\\n    /**\\n     * @notice Retrieves the information of an upkeep.\\n     * @param upkeepId The ID of the upkeep to retrieve information for.\\n     * @return upkeepInfo The UpkeepInfo struct containing the information of the upkeep.\\n     * @dev This function calls the getUpkeep function of the AutomationRegistry contract to retrieve the information of the upkeep.\\n     */\\n    function getUpkeep(uint256 upkeepId) external view returns (UpkeepInfo memory upkeepInfo);\\n\\n    /**\\n     * @notice Retrieves the IDs of active upkeeps within a specified range.\\n     * @param offset The starting index of the range.\\n     * @param limit The maximum number of IDs to retrieve.\\n     * @return upkeeps An array of active upkeep IDs within the specified range.\\n     * @dev This function returns an array of active upkeep IDs, starting from the offset and up to the specified limit.\\n     * @dev If the offset exceeds the total number of active upkeeps, an empty array is returned.\\n     * @dev This function uses the activeUpkeeps set to retrieve the IDs.\\n     */\\n    function getActiveUpkeepIDs(uint256 offset, uint256 limit) external view returns (uint256[] memory upkeeps);\\n\\n    /**\\n     * @notice Retrieves a batch of upkeeps with their information.\\n     * @param offset The starting index of the range.\\n     * @param limit The maximum number of upkeeps to retrieve.\\n     * @return upkeeps An array of UpkeepInfo structs containing the information of the retrieved upkeeps.\\n     * @dev This function retrieves a batch of upkeeps by calling the getActiveUpkeepIDs function\\n     * to get the IDs of active upkeeps within the specified range.\\n     * @dev It then iterates over the retrieved IDs and calls the getUpkeep function of the AutomationRegistry contract\\n     * to retrieve the information of each upkeep.\\n     */\\n    function getUpkeeps(uint256 offset, uint256 limit) external view returns (UpkeepInfo[] memory);\\n\\n    /**\\n     * @notice Retrieves the minimum balance required for an upkeep.\\n     * @param upkeepId The ID of the upkeep to retrieve the minimum balance for.\\n     * @return minBalance The minimum balance required for the upkeep.\\n     * @dev This function calls the getMinBalanceForUpkeep function of the AutomationRegistry contract\\n     * to retrieve the minimum balance required for the upkeep.\\n     */\\n    function getMinBalanceForUpkeep(uint256 upkeepId) external view returns (uint96);\\n\\n    /**\\n     * @notice Retrieves the minimum balances required for a batch of upkeeps.\\n     * @param offset The starting index of the range.\\n     * @param limit The maximum number of upkeeps to retrieve minimum balances for.\\n     * @return minBalances An array of minimum balances required for the retrieved upkeeps.\\n     * @dev This function retrieves a batch of upkeeps by calling the getActiveUpkeepIDs function\\n     * to get the IDs of active upkeeps within the specified range.\\n     * @dev It then iterates over the retrieved IDs and calls the getMinBalanceForUpkeep function of the AutomationRegistry contract\\n     * to retrieve the minimum balance for each upkeep.\\n     */\\n\\n    function getMinBalancesForUpkeeps(uint256 offset, uint256 limit) external view returns (uint96[] memory);\\n\\n    /**\\n     * @notice Retrieves a batch of detailed upkeeps.\\n     * @param offset The starting index of the range.\\n     * @param limit The maximum number of detailed upkeeps to retrieve.\\n     * @return detailedUpkeeps An array of DetailedUpkeep structs containing the information of the retrieved detailed upkeeps.\\n     * @dev This function retrieves a batch of upkeeps by calling the getActiveUpkeepIDs function\\n     * to get the IDs of active upkeeps within the specified range.\\n     * @dev It then calls the getUpkeeps and getMinBalancesForUpkeeps functions to retrieve the information and minimum balances for the upkeeps.\\n     * @dev Finally, it combines the information into DetailedUpkeep structs and returns an array of detailed upkeeps.\\n     */\\n    function getDetailedUpkeeps(uint256 offset, uint256 limit) external view returns (DetailedUpkeep[] memory);\\n\\n    /**\\n     * @notice Retrieves the total number of active upkeeps.\\n     * @return count The total number of active upkeeps.\\n     * @dev This function returns the length of the activeUpkeeps set, representing the total number of active upkeeps.\\n     */\\n    function getUpkeepsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the current state, configuration, signers, transmitters, and flag from the registry.\\n     * @return state The State struct containing the current state of the registry.\\n     * @return config The OnchainConfig struct containing the current on-chain configuration of the registry.\\n     * @return signers An array of addresses representing the signers associated with the registry.\\n     * @return transmitters An array of addresses representing the transmitters associated with the registry.\\n     * @return f The flag value associated with the registry.\\n     * @dev This function calls the getState function of the AutomationRegistry contract\\n     * to retrieve the current state, configuration, signers, transmitters, and flag.\\n     */\\n    function getState()\\n        external\\n        view\\n        returns (\\n            State memory state,\\n            OnchainConfig memory config,\\n            address[] memory signers,\\n            address[] memory transmitters,\\n            uint8 f\\n        );\\n\\n    /**\\n     * @notice Checks if a new upkeep is needed and returns the offset and limit for the next of upkeep.\\n     * @return isNeeded A boolean indicating whether a new upkeep is needed.\\n     * @return newOffset The offset value for the next upkeep.\\n     * @return newLimit The limit value for the next upkeep.\\n     * @dev This function calculates the offset and limit for the next upkeep based on the last active upkeep.\\n     * @dev It retrieves the last active upkeep ID and the associated performOffset and performLimit from the registry.\\n     * @dev It then calls the checkUpkeep function of the AutomationCompatible contract to perform the upkeep check.\\n     * @dev The result is used to determine whether a new upkeep is needed,\\n     * and the new offset and limit values for the next upkeep are calculated.\\n     */\\n    function isNewUpkeepNeeded() external view returns (bool isNeeded, uint256 newOffset, uint256 newLimit);\\n\\n    /**\\n     * @notice Performs the upkeep check for a specific upkeep.\\n     * @param upkeepId The ID of the upkeep to check.\\n     * @return upkeepNeeded A boolean indicating whether the upkeep is needed.\\n     * @return performData The perform data associated with the upkeep.\\n     * @return upkeepFailureReason The reason for the upkeep failure, if applicable.\\n     * @return gasUsed The amount of gas used during the upkeep check.\\n     * @return fastGasWei The wei value for fast gas during the upkeep check.\\n     * @return linkNative The amount of LINK or native currency used during the upkeep check.\\n     * @dev This function calls the checkUpkeep function of the AutomationRegistry contract\\n     * to perform the upkeep check for the specified upkeep.\\n     */\\n    function checkUpkeep(\\n        uint256 upkeepId\\n    )\\n        external\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory performData,\\n            UpkeepFailureReason upkeepFailureReason,\\n            uint256 gasUsed,\\n            uint256 fastGasWei,\\n            uint256 linkNative\\n        );\\n}\\n\",\"keccak256\":\"0x11e7453f9d5024f38dbdf8465dbc7cb2bde4b1e75feafb32ee45fae342a848f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract implements the UpkeepControllerInterface and provides functionality to register, cancel, pause, and unpause upkeeps, as well as update their check data, gas limits, and off-chain configurations.",
    "kind": "dev",
    "methods": {
      "addFunds(uint256,uint96)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "cancelUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "checkUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "constructor": {
        "params": {
          "link": "The address of the LinkToken contract.",
          "registrar": "The address of the KeeperRegistrar contract.",
          "registry": "The address of the AutomationRegistry contract."
        }
      },
      "getActiveUpkeepIDs(uint256,uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getDetailedUpkeeps(uint256,uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getMinBalanceForUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getMinBalancesForUpkeeps(uint256,uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getState()": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getUpkeeps(uint256,uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "getUpkeepsCount()": {
        "details": "See {UpkeepControllerInterface}"
      },
      "isNewUpkeepNeeded()": {
        "details": "See {UpkeepControllerInterface}"
      },
      "pauseUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "registerAndPredictID((string,bytes,address,uint32,address,bytes,bytes,uint96))": {
        "details": "See {UpkeepControllerInterface}"
      },
      "setUpkeepGasLimit(uint256,uint32)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "setUpkeepOffchainConfig(uint256,bytes)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "unpauseUpkeep(uint256)": {
        "details": "See {UpkeepControllerInterface}"
      },
      "updateCheckData(uint256,bytes)": {
        "details": "See {UpkeepControllerInterface}"
      }
    },
    "title": "UpkeepController contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundsAdded(uint256,uint96)": {
        "notice": "Emitted when funds are added to an upkeep."
      },
      "UpkeepCanceled(uint256)": {
        "notice": "Emitted when an upkeep is canceled."
      },
      "UpkeepCreated(uint256)": {
        "notice": "Emitted when a new upkeep is created."
      },
      "UpkeepGasLimitSet(uint256,uint32)": {
        "notice": "Emitted when the gas limit is set for an upkeep."
      },
      "UpkeepOffchainConfigSet(uint256,bytes)": {
        "notice": "Emitted when the off-chain configuration is set for an upkeep."
      },
      "UpkeepPaused(uint256)": {
        "notice": "Emitted when an upkeep is paused."
      },
      "UpkeepUnpaused(uint256)": {
        "notice": "Emitted when an upkeep is unpaused."
      },
      "UpkeepUpdated(uint256,bytes)": {
        "notice": "Emitted when an upkeep is updated."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs the UpkeepController contract."
      }
    },
    "notice": "A contract that manages upkeeps for the Chainlink automation system.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7202,
        "contract": "contracts/automationController/UpkeepController.sol:UpkeepController",
        "label": "activeUpkeeps",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(UintSet)4207_storage"
      },
      {
        "astId": 7205,
        "contract": "contracts/automationController/UpkeepController.sol:UpkeepController",
        "label": "pausedUpkeeps",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)4207_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)3735_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3730,
            "contract": "contracts/automationController/UpkeepController.sol:UpkeepController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3734,
            "contract": "contracts/automationController/UpkeepController.sol:UpkeepController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4207_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4206,
            "contract": "contracts/automationController/UpkeepController.sol:UpkeepController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3735_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}